/**
 *
 *  Devices.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Devices.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::IOTServerDB;

const std::string Devices::Cols::_device_id = "device_id";
const std::string Devices::Cols::_device_name = "device_name";
const std::string Devices::Cols::_device_comment = "device_comment";
const std::string Devices::Cols::_device_topics_id = "device_topics_id";
const std::string Devices::primaryKeyName = "device_id";
const bool Devices::hasPrimaryKey = true;
const std::string Devices::tableName = "devices";

const std::vector<typename Devices::MetaData> Devices::metaData_={
{"device_id","uint32_t","int unsigned",4,1,1,1},
{"device_name","std::string","varchar(100)",100,0,0,1},
{"device_comment","std::string","varchar(1024)",1024,0,0,0},
{"device_topics_id","uint32_t","int unsigned",4,0,0,0}
};
const std::string &Devices::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Devices::Devices(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["device_id"].isNull())
        {
            deviceId_=std::make_shared<uint32_t>(r["device_id"].as<uint32_t>());
        }
        if(!r["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(r["device_name"].as<std::string>());
        }
        if(!r["device_comment"].isNull())
        {
            deviceComment_=std::make_shared<std::string>(r["device_comment"].as<std::string>());
        }
        if(!r["device_topics_id"].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>(r["device_topics_id"].as<uint32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            deviceId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            deviceName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            deviceComment_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
    }

}

Devices::Devices(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            deviceId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            deviceComment_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

Devices::Devices(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("device_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["device_id"].isNull())
        {
            deviceId_=std::make_shared<uint32_t>((uint32_t)pJson["device_id"].asUInt64());
        }
    }
    if(pJson.isMember("device_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson["device_name"].asString());
        }
    }
    if(pJson.isMember("device_comment"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["device_comment"].isNull())
        {
            deviceComment_=std::make_shared<std::string>(pJson["device_comment"].asString());
        }
    }
    if(pJson.isMember("device_topics_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["device_topics_id"].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson["device_topics_id"].asUInt64());
        }
    }
}

void Devices::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            deviceId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            deviceComment_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

void Devices::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("device_id"))
    {
        if(!pJson["device_id"].isNull())
        {
            deviceId_=std::make_shared<uint32_t>((uint32_t)pJson["device_id"].asUInt64());
        }
    }
    if(pJson.isMember("device_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson["device_name"].asString());
        }
    }
    if(pJson.isMember("device_comment"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["device_comment"].isNull())
        {
            deviceComment_=std::make_shared<std::string>(pJson["device_comment"].asString());
        }
    }
    if(pJson.isMember("device_topics_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["device_topics_id"].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson["device_topics_id"].asUInt64());
        }
    }
}

const uint32_t &Devices::getValueOfDeviceId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(deviceId_)
        return *deviceId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Devices::getDeviceId() const noexcept
{
    return deviceId_;
}
void Devices::setDeviceId(const uint32_t &pDeviceId) noexcept
{
    deviceId_ = std::make_shared<uint32_t>(pDeviceId);
    dirtyFlag_[0] = true;
}
const typename Devices::PrimaryKeyType & Devices::getPrimaryKey() const
{
    assert(deviceId_);
    return *deviceId_;
}

const std::string &Devices::getValueOfDeviceName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceName_)
        return *deviceName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Devices::getDeviceName() const noexcept
{
    return deviceName_;
}
void Devices::setDeviceName(const std::string &pDeviceName) noexcept
{
    deviceName_ = std::make_shared<std::string>(pDeviceName);
    dirtyFlag_[1] = true;
}
void Devices::setDeviceName(std::string &&pDeviceName) noexcept
{
    deviceName_ = std::make_shared<std::string>(std::move(pDeviceName));
    dirtyFlag_[1] = true;
}

const std::string &Devices::getValueOfDeviceComment() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceComment_)
        return *deviceComment_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Devices::getDeviceComment() const noexcept
{
    return deviceComment_;
}
void Devices::setDeviceComment(const std::string &pDeviceComment) noexcept
{
    deviceComment_ = std::make_shared<std::string>(pDeviceComment);
    dirtyFlag_[2] = true;
}
void Devices::setDeviceComment(std::string &&pDeviceComment) noexcept
{
    deviceComment_ = std::make_shared<std::string>(std::move(pDeviceComment));
    dirtyFlag_[2] = true;
}
void Devices::setDeviceCommentToNull() noexcept
{
    deviceComment_.reset();
    dirtyFlag_[2] = true;
}

const uint32_t &Devices::getValueOfDeviceTopicsId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(deviceTopicsId_)
        return *deviceTopicsId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Devices::getDeviceTopicsId() const noexcept
{
    return deviceTopicsId_;
}
void Devices::setDeviceTopicsId(const uint32_t &pDeviceTopicsId) noexcept
{
    deviceTopicsId_ = std::make_shared<uint32_t>(pDeviceTopicsId);
    dirtyFlag_[3] = true;
}
void Devices::setDeviceTopicsIdToNull() noexcept
{
    deviceTopicsId_.reset();
    dirtyFlag_[3] = true;
}

void Devices::updateId(const uint64_t id)
{
    deviceId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Devices::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "device_name",
        "device_comment",
        "device_topics_id"
    };
    return inCols;
}

void Devices::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDeviceName())
        {
            binder << getValueOfDeviceName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDeviceComment())
        {
            binder << getValueOfDeviceComment();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDeviceTopicsId())
        {
            binder << getValueOfDeviceTopicsId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Devices::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Devices::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDeviceName())
        {
            binder << getValueOfDeviceName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDeviceComment())
        {
            binder << getValueOfDeviceComment();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDeviceTopicsId())
        {
            binder << getValueOfDeviceTopicsId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Devices::toJson() const
{
    Json::Value ret;
    if(getDeviceId())
    {
        ret["device_id"]=getValueOfDeviceId();
    }
    else
    {
        ret["device_id"]=Json::Value();
    }
    if(getDeviceName())
    {
        ret["device_name"]=getValueOfDeviceName();
    }
    else
    {
        ret["device_name"]=Json::Value();
    }
    if(getDeviceComment())
    {
        ret["device_comment"]=getValueOfDeviceComment();
    }
    else
    {
        ret["device_comment"]=Json::Value();
    }
    if(getDeviceTopicsId())
    {
        ret["device_topics_id"]=getValueOfDeviceTopicsId();
    }
    else
    {
        ret["device_topics_id"]=Json::Value();
    }
    return ret;
}

Json::Value Devices::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getDeviceId())
            {
                ret[pMasqueradingVector[0]]=getValueOfDeviceId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getDeviceName())
            {
                ret[pMasqueradingVector[1]]=getValueOfDeviceName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDeviceComment())
            {
                ret[pMasqueradingVector[2]]=getValueOfDeviceComment();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDeviceTopicsId())
            {
                ret[pMasqueradingVector[3]]=getValueOfDeviceTopicsId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getDeviceId())
    {
        ret["device_id"]=getValueOfDeviceId();
    }
    else
    {
        ret["device_id"]=Json::Value();
    }
    if(getDeviceName())
    {
        ret["device_name"]=getValueOfDeviceName();
    }
    else
    {
        ret["device_name"]=Json::Value();
    }
    if(getDeviceComment())
    {
        ret["device_comment"]=getValueOfDeviceComment();
    }
    else
    {
        ret["device_comment"]=Json::Value();
    }
    if(getDeviceTopicsId())
    {
        ret["device_topics_id"]=getValueOfDeviceTopicsId();
    }
    else
    {
        ret["device_topics_id"]=Json::Value();
    }
    return ret;
}

bool Devices::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("device_id"))
    {
        if(!validJsonOfField(0, "device_id", pJson["device_id"], err, true))
            return false;
    }
    if(pJson.isMember("device_name"))
    {
        if(!validJsonOfField(1, "device_name", pJson["device_name"], err, true))
            return false;
    }
    else
    {
        err="The device_name column cannot be null";
        return false;
    }
    if(pJson.isMember("device_comment"))
    {
        if(!validJsonOfField(2, "device_comment", pJson["device_comment"], err, true))
            return false;
    }
    if(pJson.isMember("device_topics_id"))
    {
        if(!validJsonOfField(3, "device_topics_id", pJson["device_topics_id"], err, true))
            return false;
    }
    return true;
}
bool Devices::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Devices::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("device_id"))
    {
        if(!validJsonOfField(0, "device_id", pJson["device_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("device_name"))
    {
        if(!validJsonOfField(1, "device_name", pJson["device_name"], err, false))
            return false;
    }
    if(pJson.isMember("device_comment"))
    {
        if(!validJsonOfField(2, "device_comment", pJson["device_comment"], err, false))
            return false;
    }
    if(pJson.isMember("device_topics_id"))
    {
        if(!validJsonOfField(3, "device_topics_id", pJson["device_topics_id"], err, false))
            return false;
    }
    return true;
}
bool Devices::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Devices::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
