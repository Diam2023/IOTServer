/**
 *
 *  UserDeviceActionMap.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserDeviceActionMap.h"
#include "Device.h"
#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::iot_server;

const std::string UserDeviceActionMap::Cols::_action_map_id = "action_map_id";
const std::string UserDeviceActionMap::Cols::_target_user_id = "target_user_id";
const std::string UserDeviceActionMap::Cols::_target_device_id = "target_device_id";
const std::string UserDeviceActionMap::Cols::_action_name = "action_name";
const std::string UserDeviceActionMap::Cols::_action_target_topic_id = "action_target_topic_id";
const std::string UserDeviceActionMap::Cols::_action_json = "action_json";
const std::string UserDeviceActionMap::primaryKeyName = "action_map_id";
const bool UserDeviceActionMap::hasPrimaryKey = true;
const std::string UserDeviceActionMap::tableName = "user_device_action_map";

const std::vector<typename UserDeviceActionMap::MetaData> UserDeviceActionMap::metaData_={
{"action_map_id","uint32_t","int unsigned",4,1,1,1},
{"target_user_id","uint32_t","int unsigned",4,0,0,1},
{"target_device_id","uint32_t","int unsigned",4,0,0,1},
{"action_name","std::string","varchar(255)",255,0,0,1},
{"action_target_topic_id","uint32_t","int unsigned",4,0,0,1},
{"action_json","std::string","json",0,0,0,1}
};
const std::string &UserDeviceActionMap::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserDeviceActionMap::UserDeviceActionMap(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["action_map_id"].isNull())
        {
            actionMapId_=std::make_shared<uint32_t>(r["action_map_id"].as<uint32_t>());
        }
        if(!r["target_user_id"].isNull())
        {
            targetUserId_=std::make_shared<uint32_t>(r["target_user_id"].as<uint32_t>());
        }
        if(!r["target_device_id"].isNull())
        {
            targetDeviceId_=std::make_shared<uint32_t>(r["target_device_id"].as<uint32_t>());
        }
        if(!r["action_name"].isNull())
        {
            actionName_=std::make_shared<std::string>(r["action_name"].as<std::string>());
        }
        if(!r["action_target_topic_id"].isNull())
        {
            actionTargetTopicId_=std::make_shared<uint32_t>(r["action_target_topic_id"].as<uint32_t>());
        }
        if(!r["action_json"].isNull())
        {
            actionJson_=std::make_shared<std::string>(r["action_json"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            actionMapId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            targetUserId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            targetDeviceId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            actionName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            actionTargetTopicId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            actionJson_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

UserDeviceActionMap::UserDeviceActionMap(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            actionMapId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            targetUserId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            targetDeviceId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            actionName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            actionTargetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            actionJson_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

UserDeviceActionMap::UserDeviceActionMap(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("action_map_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["action_map_id"].isNull())
        {
            actionMapId_=std::make_shared<uint32_t>((uint32_t)pJson["action_map_id"].asUInt64());
        }
    }
    if(pJson.isMember("target_user_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["target_user_id"].isNull())
        {
            targetUserId_=std::make_shared<uint32_t>((uint32_t)pJson["target_user_id"].asUInt64());
        }
    }
    if(pJson.isMember("target_device_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["target_device_id"].isNull())
        {
            targetDeviceId_=std::make_shared<uint32_t>((uint32_t)pJson["target_device_id"].asUInt64());
        }
    }
    if(pJson.isMember("action_name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["action_name"].isNull())
        {
            actionName_=std::make_shared<std::string>(pJson["action_name"].asString());
        }
    }
    if(pJson.isMember("action_target_topic_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["action_target_topic_id"].isNull())
        {
            actionTargetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson["action_target_topic_id"].asUInt64());
        }
    }
    if(pJson.isMember("action_json"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["action_json"].isNull())
        {
            actionJson_=std::make_shared<std::string>(pJson["action_json"].asString());
        }
    }
}

void UserDeviceActionMap::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            actionMapId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            targetUserId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            targetDeviceId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            actionName_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            actionTargetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            actionJson_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void UserDeviceActionMap::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("action_map_id"))
    {
        if(!pJson["action_map_id"].isNull())
        {
            actionMapId_=std::make_shared<uint32_t>((uint32_t)pJson["action_map_id"].asUInt64());
        }
    }
    if(pJson.isMember("target_user_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["target_user_id"].isNull())
        {
            targetUserId_=std::make_shared<uint32_t>((uint32_t)pJson["target_user_id"].asUInt64());
        }
    }
    if(pJson.isMember("target_device_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["target_device_id"].isNull())
        {
            targetDeviceId_=std::make_shared<uint32_t>((uint32_t)pJson["target_device_id"].asUInt64());
        }
    }
    if(pJson.isMember("action_name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["action_name"].isNull())
        {
            actionName_=std::make_shared<std::string>(pJson["action_name"].asString());
        }
    }
    if(pJson.isMember("action_target_topic_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["action_target_topic_id"].isNull())
        {
            actionTargetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson["action_target_topic_id"].asUInt64());
        }
    }
    if(pJson.isMember("action_json"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["action_json"].isNull())
        {
            actionJson_=std::make_shared<std::string>(pJson["action_json"].asString());
        }
    }
}

const uint32_t &UserDeviceActionMap::getValueOfActionMapId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(actionMapId_)
        return *actionMapId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserDeviceActionMap::getActionMapId() const noexcept
{
    return actionMapId_;
}
void UserDeviceActionMap::setActionMapId(const uint32_t &pActionMapId) noexcept
{
    actionMapId_ = std::make_shared<uint32_t>(pActionMapId);
    dirtyFlag_[0] = true;
}
const typename UserDeviceActionMap::PrimaryKeyType & UserDeviceActionMap::getPrimaryKey() const
{
    assert(actionMapId_);
    return *actionMapId_;
}

const uint32_t &UserDeviceActionMap::getValueOfTargetUserId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(targetUserId_)
        return *targetUserId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserDeviceActionMap::getTargetUserId() const noexcept
{
    return targetUserId_;
}
void UserDeviceActionMap::setTargetUserId(const uint32_t &pTargetUserId) noexcept
{
    targetUserId_ = std::make_shared<uint32_t>(pTargetUserId);
    dirtyFlag_[1] = true;
}

const uint32_t &UserDeviceActionMap::getValueOfTargetDeviceId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(targetDeviceId_)
        return *targetDeviceId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserDeviceActionMap::getTargetDeviceId() const noexcept
{
    return targetDeviceId_;
}
void UserDeviceActionMap::setTargetDeviceId(const uint32_t &pTargetDeviceId) noexcept
{
    targetDeviceId_ = std::make_shared<uint32_t>(pTargetDeviceId);
    dirtyFlag_[2] = true;
}

const std::string &UserDeviceActionMap::getValueOfActionName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(actionName_)
        return *actionName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserDeviceActionMap::getActionName() const noexcept
{
    return actionName_;
}
void UserDeviceActionMap::setActionName(const std::string &pActionName) noexcept
{
    actionName_ = std::make_shared<std::string>(pActionName);
    dirtyFlag_[3] = true;
}
void UserDeviceActionMap::setActionName(std::string &&pActionName) noexcept
{
    actionName_ = std::make_shared<std::string>(std::move(pActionName));
    dirtyFlag_[3] = true;
}

const uint32_t &UserDeviceActionMap::getValueOfActionTargetTopicId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(actionTargetTopicId_)
        return *actionTargetTopicId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &UserDeviceActionMap::getActionTargetTopicId() const noexcept
{
    return actionTargetTopicId_;
}
void UserDeviceActionMap::setActionTargetTopicId(const uint32_t &pActionTargetTopicId) noexcept
{
    actionTargetTopicId_ = std::make_shared<uint32_t>(pActionTargetTopicId);
    dirtyFlag_[4] = true;
}

const std::string &UserDeviceActionMap::getValueOfActionJson() const noexcept
{
    const static std::string defaultValue = std::string();
    if(actionJson_)
        return *actionJson_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserDeviceActionMap::getActionJson() const noexcept
{
    return actionJson_;
}
void UserDeviceActionMap::setActionJson(const std::string &pActionJson) noexcept
{
    actionJson_ = std::make_shared<std::string>(pActionJson);
    dirtyFlag_[5] = true;
}
void UserDeviceActionMap::setActionJson(std::string &&pActionJson) noexcept
{
    actionJson_ = std::make_shared<std::string>(std::move(pActionJson));
    dirtyFlag_[5] = true;
}

void UserDeviceActionMap::updateId(const uint64_t id)
{
    actionMapId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &UserDeviceActionMap::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "target_user_id",
        "target_device_id",
        "action_name",
        "action_target_topic_id",
        "action_json"
    };
    return inCols;
}

void UserDeviceActionMap::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTargetUserId())
        {
            binder << getValueOfTargetUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTargetDeviceId())
        {
            binder << getValueOfTargetDeviceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getActionName())
        {
            binder << getValueOfActionName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getActionTargetTopicId())
        {
            binder << getValueOfActionTargetTopicId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getActionJson())
        {
            binder << getValueOfActionJson();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserDeviceActionMap::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void UserDeviceActionMap::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTargetUserId())
        {
            binder << getValueOfTargetUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTargetDeviceId())
        {
            binder << getValueOfTargetDeviceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getActionName())
        {
            binder << getValueOfActionName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getActionTargetTopicId())
        {
            binder << getValueOfActionTargetTopicId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getActionJson())
        {
            binder << getValueOfActionJson();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserDeviceActionMap::toJson() const
{
    Json::Value ret;
    if(getActionMapId())
    {
        ret["action_map_id"]=getValueOfActionMapId();
    }
    else
    {
        ret["action_map_id"]=Json::Value();
    }
    if(getTargetUserId())
    {
        ret["target_user_id"]=getValueOfTargetUserId();
    }
    else
    {
        ret["target_user_id"]=Json::Value();
    }
    if(getTargetDeviceId())
    {
        ret["target_device_id"]=getValueOfTargetDeviceId();
    }
    else
    {
        ret["target_device_id"]=Json::Value();
    }
    if(getActionName())
    {
        ret["action_name"]=getValueOfActionName();
    }
    else
    {
        ret["action_name"]=Json::Value();
    }
    if(getActionTargetTopicId())
    {
        ret["action_target_topic_id"]=getValueOfActionTargetTopicId();
    }
    else
    {
        ret["action_target_topic_id"]=Json::Value();
    }
    if(getActionJson())
    {
        ret["action_json"]=getValueOfActionJson();
    }
    else
    {
        ret["action_json"]=Json::Value();
    }
    return ret;
}

Json::Value UserDeviceActionMap::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getActionMapId())
            {
                ret[pMasqueradingVector[0]]=getValueOfActionMapId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTargetUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTargetUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTargetDeviceId())
            {
                ret[pMasqueradingVector[2]]=getValueOfTargetDeviceId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getActionName())
            {
                ret[pMasqueradingVector[3]]=getValueOfActionName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getActionTargetTopicId())
            {
                ret[pMasqueradingVector[4]]=getValueOfActionTargetTopicId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getActionJson())
            {
                ret[pMasqueradingVector[5]]=getValueOfActionJson();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getActionMapId())
    {
        ret["action_map_id"]=getValueOfActionMapId();
    }
    else
    {
        ret["action_map_id"]=Json::Value();
    }
    if(getTargetUserId())
    {
        ret["target_user_id"]=getValueOfTargetUserId();
    }
    else
    {
        ret["target_user_id"]=Json::Value();
    }
    if(getTargetDeviceId())
    {
        ret["target_device_id"]=getValueOfTargetDeviceId();
    }
    else
    {
        ret["target_device_id"]=Json::Value();
    }
    if(getActionName())
    {
        ret["action_name"]=getValueOfActionName();
    }
    else
    {
        ret["action_name"]=Json::Value();
    }
    if(getActionTargetTopicId())
    {
        ret["action_target_topic_id"]=getValueOfActionTargetTopicId();
    }
    else
    {
        ret["action_target_topic_id"]=Json::Value();
    }
    if(getActionJson())
    {
        ret["action_json"]=getValueOfActionJson();
    }
    else
    {
        ret["action_json"]=Json::Value();
    }
    return ret;
}

bool UserDeviceActionMap::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("action_map_id"))
    {
        if(!validJsonOfField(0, "action_map_id", pJson["action_map_id"], err, true))
            return false;
    }
    if(pJson.isMember("target_user_id"))
    {
        if(!validJsonOfField(1, "target_user_id", pJson["target_user_id"], err, true))
            return false;
    }
    else
    {
        err="The target_user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("target_device_id"))
    {
        if(!validJsonOfField(2, "target_device_id", pJson["target_device_id"], err, true))
            return false;
    }
    else
    {
        err="The target_device_id column cannot be null";
        return false;
    }
    if(pJson.isMember("action_name"))
    {
        if(!validJsonOfField(3, "action_name", pJson["action_name"], err, true))
            return false;
    }
    else
    {
        err="The action_name column cannot be null";
        return false;
    }
    if(pJson.isMember("action_target_topic_id"))
    {
        if(!validJsonOfField(4, "action_target_topic_id", pJson["action_target_topic_id"], err, true))
            return false;
    }
    else
    {
        err="The action_target_topic_id column cannot be null";
        return false;
    }
    if(pJson.isMember("action_json"))
    {
        if(!validJsonOfField(5, "action_json", pJson["action_json"], err, true))
            return false;
    }
    else
    {
        err="The action_json column cannot be null";
        return false;
    }
    return true;
}
bool UserDeviceActionMap::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                             const std::vector<std::string> &pMasqueradingVector,
                                                             std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserDeviceActionMap::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("action_map_id"))
    {
        if(!validJsonOfField(0, "action_map_id", pJson["action_map_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("target_user_id"))
    {
        if(!validJsonOfField(1, "target_user_id", pJson["target_user_id"], err, false))
            return false;
    }
    if(pJson.isMember("target_device_id"))
    {
        if(!validJsonOfField(2, "target_device_id", pJson["target_device_id"], err, false))
            return false;
    }
    if(pJson.isMember("action_name"))
    {
        if(!validJsonOfField(3, "action_name", pJson["action_name"], err, false))
            return false;
    }
    if(pJson.isMember("action_target_topic_id"))
    {
        if(!validJsonOfField(4, "action_target_topic_id", pJson["action_target_topic_id"], err, false))
            return false;
    }
    if(pJson.isMember("action_json"))
    {
        if(!validJsonOfField(5, "action_json", pJson["action_json"], err, false))
            return false;
    }
    return true;
}
bool UserDeviceActionMap::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserDeviceActionMap::validJsonOfField(size_t index,
                                           const std::string &fieldName,
                                           const Json::Value &pJson,
                                           std::string &err,
                                           bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
User UserDeviceActionMap::getUser(const DbClientPtr &clientPtr) const {
    const static std::string sql = "select * from user where user_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *targetUserId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return User(r[0]);
}

void UserDeviceActionMap::getUser(const DbClientPtr &clientPtr,
                                  const std::function<void(User)> &rcb,
                                  const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from user where user_id = ?";
    *clientPtr << sql
               << *targetUserId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
Device UserDeviceActionMap::getDevice(const DbClientPtr &clientPtr) const {
    const static std::string sql = "select * from device where device_id = ?";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *targetDeviceId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Device(r[0]);
}

void UserDeviceActionMap::getDevice(const DbClientPtr &clientPtr,
                                    const std::function<void(Device)> &rcb,
                                    const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from device where device_id = ?";
    *clientPtr << sql
               << *targetDeviceId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Device(r[0]));
                    }
               }
               >> ecb;
}
