/**
 *
 *  Topics.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Topics.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::IOTServerDB;

const std::string Topics::Cols::_topic_id = "topic_id";
const std::string Topics::Cols::_topic_name = "topic_name";
const std::string Topics::Cols::_topic_data = "topic_data";
const std::string Topics::Cols::_topic_qos = "topic_qos";
const std::string Topics::Cols::_topic_permission_level = "topic_permission_level";
const std::string Topics::primaryKeyName = "topic_id";
const bool Topics::hasPrimaryKey = true;
const std::string Topics::tableName = "topics";

const std::vector<typename Topics::MetaData> Topics::metaData_={
{"topic_id","uint32_t","int unsigned",4,1,1,1},
{"topic_name","std::string","varchar(255)",255,0,0,1},
{"topic_data","std::string","json",0,0,0,0},
{"topic_qos","std::string","enum('QOS0','QOS1','QOS2')",0,0,0,1},
{"topic_permission_level","uint32_t","int unsigned",4,0,0,1}
};
const std::string &Topics::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Topics::Topics(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["topic_id"].isNull())
        {
            topicId_=std::make_shared<uint32_t>(r["topic_id"].as<uint32_t>());
        }
        if(!r["topic_name"].isNull())
        {
            topicName_=std::make_shared<std::string>(r["topic_name"].as<std::string>());
        }
        if(!r["topic_data"].isNull())
        {
            topicData_=std::make_shared<std::string>(r["topic_data"].as<std::string>());
        }
        if(!r["topic_qos"].isNull())
        {
            topicQos_=std::make_shared<std::string>(r["topic_qos"].as<std::string>());
        }
        if(!r["topic_permission_level"].isNull())
        {
            topicPermissionLevel_=std::make_shared<uint32_t>(r["topic_permission_level"].as<uint32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            topicId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            topicName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            topicData_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            topicQos_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            topicPermissionLevel_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
    }

}

Topics::Topics(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            topicId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            topicName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            topicData_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            topicQos_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            topicPermissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

Topics::Topics(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("topic_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["topic_id"].isNull())
        {
            topicId_=std::make_shared<uint32_t>((uint32_t)pJson["topic_id"].asUInt64());
        }
    }
    if(pJson.isMember("topic_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["topic_name"].isNull())
        {
            topicName_=std::make_shared<std::string>(pJson["topic_name"].asString());
        }
    }
    if(pJson.isMember("topic_data"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["topic_data"].isNull())
        {
            topicData_=std::make_shared<std::string>(pJson["topic_data"].asString());
        }
    }
    if(pJson.isMember("topic_qos"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["topic_qos"].isNull())
        {
            topicQos_=std::make_shared<std::string>(pJson["topic_qos"].asString());
        }
    }
    if(pJson.isMember("topic_permission_level"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["topic_permission_level"].isNull())
        {
            topicPermissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson["topic_permission_level"].asUInt64());
        }
    }
}

void Topics::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            topicId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            topicName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            topicData_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            topicQos_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            topicPermissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
}

void Topics::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("topic_id"))
    {
        if(!pJson["topic_id"].isNull())
        {
            topicId_=std::make_shared<uint32_t>((uint32_t)pJson["topic_id"].asUInt64());
        }
    }
    if(pJson.isMember("topic_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["topic_name"].isNull())
        {
            topicName_=std::make_shared<std::string>(pJson["topic_name"].asString());
        }
    }
    if(pJson.isMember("topic_data"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["topic_data"].isNull())
        {
            topicData_=std::make_shared<std::string>(pJson["topic_data"].asString());
        }
    }
    if(pJson.isMember("topic_qos"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["topic_qos"].isNull())
        {
            topicQos_=std::make_shared<std::string>(pJson["topic_qos"].asString());
        }
    }
    if(pJson.isMember("topic_permission_level"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["topic_permission_level"].isNull())
        {
            topicPermissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson["topic_permission_level"].asUInt64());
        }
    }
}

const uint32_t &Topics::getValueOfTopicId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(topicId_)
        return *topicId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Topics::getTopicId() const noexcept
{
    return topicId_;
}
void Topics::setTopicId(const uint32_t &pTopicId) noexcept
{
    topicId_ = std::make_shared<uint32_t>(pTopicId);
    dirtyFlag_[0] = true;
}
const typename Topics::PrimaryKeyType & Topics::getPrimaryKey() const
{
    assert(topicId_);
    return *topicId_;
}

const std::string &Topics::getValueOfTopicName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(topicName_)
        return *topicName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Topics::getTopicName() const noexcept
{
    return topicName_;
}
void Topics::setTopicName(const std::string &pTopicName) noexcept
{
    topicName_ = std::make_shared<std::string>(pTopicName);
    dirtyFlag_[1] = true;
}
void Topics::setTopicName(std::string &&pTopicName) noexcept
{
    topicName_ = std::make_shared<std::string>(std::move(pTopicName));
    dirtyFlag_[1] = true;
}

const std::string &Topics::getValueOfTopicData() const noexcept
{
    const static std::string defaultValue = std::string();
    if(topicData_)
        return *topicData_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Topics::getTopicData() const noexcept
{
    return topicData_;
}
void Topics::setTopicData(const std::string &pTopicData) noexcept
{
    topicData_ = std::make_shared<std::string>(pTopicData);
    dirtyFlag_[2] = true;
}
void Topics::setTopicData(std::string &&pTopicData) noexcept
{
    topicData_ = std::make_shared<std::string>(std::move(pTopicData));
    dirtyFlag_[2] = true;
}
void Topics::setTopicDataToNull() noexcept
{
    topicData_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Topics::getValueOfTopicQos() const noexcept
{
    const static std::string defaultValue = std::string();
    if(topicQos_)
        return *topicQos_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Topics::getTopicQos() const noexcept
{
    return topicQos_;
}
void Topics::setTopicQos(const std::string &pTopicQos) noexcept
{
    topicQos_ = std::make_shared<std::string>(pTopicQos);
    dirtyFlag_[3] = true;
}
void Topics::setTopicQos(std::string &&pTopicQos) noexcept
{
    topicQos_ = std::make_shared<std::string>(std::move(pTopicQos));
    dirtyFlag_[3] = true;
}

const uint32_t &Topics::getValueOfTopicPermissionLevel() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(topicPermissionLevel_)
        return *topicPermissionLevel_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Topics::getTopicPermissionLevel() const noexcept
{
    return topicPermissionLevel_;
}
void Topics::setTopicPermissionLevel(const uint32_t &pTopicPermissionLevel) noexcept
{
    topicPermissionLevel_ = std::make_shared<uint32_t>(pTopicPermissionLevel);
    dirtyFlag_[4] = true;
}

void Topics::updateId(const uint64_t id)
{
    topicId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Topics::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "topic_name",
        "topic_data",
        "topic_qos",
        "topic_permission_level"
    };
    return inCols;
}

void Topics::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTopicName())
        {
            binder << getValueOfTopicName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTopicData())
        {
            binder << getValueOfTopicData();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTopicQos())
        {
            binder << getValueOfTopicQos();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTopicPermissionLevel())
        {
            binder << getValueOfTopicPermissionLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Topics::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Topics::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTopicName())
        {
            binder << getValueOfTopicName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTopicData())
        {
            binder << getValueOfTopicData();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTopicQos())
        {
            binder << getValueOfTopicQos();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTopicPermissionLevel())
        {
            binder << getValueOfTopicPermissionLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Topics::toJson() const
{
    Json::Value ret;
    if(getTopicId())
    {
        ret["topic_id"]=getValueOfTopicId();
    }
    else
    {
        ret["topic_id"]=Json::Value();
    }
    if(getTopicName())
    {
        ret["topic_name"]=getValueOfTopicName();
    }
    else
    {
        ret["topic_name"]=Json::Value();
    }
    if(getTopicData())
    {
        ret["topic_data"]=getValueOfTopicData();
    }
    else
    {
        ret["topic_data"]=Json::Value();
    }
    if(getTopicQos())
    {
        ret["topic_qos"]=getValueOfTopicQos();
    }
    else
    {
        ret["topic_qos"]=Json::Value();
    }
    if(getTopicPermissionLevel())
    {
        ret["topic_permission_level"]=getValueOfTopicPermissionLevel();
    }
    else
    {
        ret["topic_permission_level"]=Json::Value();
    }
    return ret;
}

Json::Value Topics::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTopicId())
            {
                ret[pMasqueradingVector[0]]=getValueOfTopicId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTopicName())
            {
                ret[pMasqueradingVector[1]]=getValueOfTopicName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTopicData())
            {
                ret[pMasqueradingVector[2]]=getValueOfTopicData();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTopicQos())
            {
                ret[pMasqueradingVector[3]]=getValueOfTopicQos();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTopicPermissionLevel())
            {
                ret[pMasqueradingVector[4]]=getValueOfTopicPermissionLevel();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTopicId())
    {
        ret["topic_id"]=getValueOfTopicId();
    }
    else
    {
        ret["topic_id"]=Json::Value();
    }
    if(getTopicName())
    {
        ret["topic_name"]=getValueOfTopicName();
    }
    else
    {
        ret["topic_name"]=Json::Value();
    }
    if(getTopicData())
    {
        ret["topic_data"]=getValueOfTopicData();
    }
    else
    {
        ret["topic_data"]=Json::Value();
    }
    if(getTopicQos())
    {
        ret["topic_qos"]=getValueOfTopicQos();
    }
    else
    {
        ret["topic_qos"]=Json::Value();
    }
    if(getTopicPermissionLevel())
    {
        ret["topic_permission_level"]=getValueOfTopicPermissionLevel();
    }
    else
    {
        ret["topic_permission_level"]=Json::Value();
    }
    return ret;
}

bool Topics::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("topic_id"))
    {
        if(!validJsonOfField(0, "topic_id", pJson["topic_id"], err, true))
            return false;
    }
    if(pJson.isMember("topic_name"))
    {
        if(!validJsonOfField(1, "topic_name", pJson["topic_name"], err, true))
            return false;
    }
    else
    {
        err="The topic_name column cannot be null";
        return false;
    }
    if(pJson.isMember("topic_data"))
    {
        if(!validJsonOfField(2, "topic_data", pJson["topic_data"], err, true))
            return false;
    }
    if(pJson.isMember("topic_qos"))
    {
        if(!validJsonOfField(3, "topic_qos", pJson["topic_qos"], err, true))
            return false;
    }
    if(pJson.isMember("topic_permission_level"))
    {
        if(!validJsonOfField(4, "topic_permission_level", pJson["topic_permission_level"], err, true))
            return false;
    }
    return true;
}
bool Topics::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Topics::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("topic_id"))
    {
        if(!validJsonOfField(0, "topic_id", pJson["topic_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("topic_name"))
    {
        if(!validJsonOfField(1, "topic_name", pJson["topic_name"], err, false))
            return false;
    }
    if(pJson.isMember("topic_data"))
    {
        if(!validJsonOfField(2, "topic_data", pJson["topic_data"], err, false))
            return false;
    }
    if(pJson.isMember("topic_qos"))
    {
        if(!validJsonOfField(3, "topic_qos", pJson["topic_qos"], err, false))
            return false;
    }
    if(pJson.isMember("topic_permission_level"))
    {
        if(!validJsonOfField(4, "topic_permission_level", pJson["topic_permission_level"], err, false))
            return false;
    }
    return true;
}
bool Topics::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Topics::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
