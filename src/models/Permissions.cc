/**
 *
 *  Permissions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Permissions.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::IOTServerDB;

const std::string Permissions::Cols::_permission_id = "permission_id";
const std::string Permissions::Cols::_permission_level = "permission_level";
const std::string Permissions::Cols::_permission_comment = "permission_comment";
const std::string Permissions::primaryKeyName = "permission_id";
const bool Permissions::hasPrimaryKey = true;
const std::string Permissions::tableName = "permissions";

const std::vector<typename Permissions::MetaData> Permissions::metaData_={
{"permission_id","uint32_t","int unsigned",4,1,1,1},
{"permission_level","uint32_t","int unsigned",4,0,0,1},
{"permission_comment","std::string","varchar(1024)",1024,0,0,0}
};
const std::string &Permissions::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Permissions::Permissions(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["permission_id"].isNull())
        {
            permissionId_=std::make_shared<uint32_t>(r["permission_id"].as<uint32_t>());
        }
        if(!r["permission_level"].isNull())
        {
            permissionLevel_=std::make_shared<uint32_t>(r["permission_level"].as<uint32_t>());
        }
        if(!r["permission_comment"].isNull())
        {
            permissionComment_=std::make_shared<std::string>(r["permission_comment"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            permissionId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            permissionLevel_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            permissionComment_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Permissions::Permissions(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            permissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            permissionComment_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Permissions::Permissions(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("permission_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["permission_id"].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson["permission_id"].asUInt64());
        }
    }
    if(pJson.isMember("permission_level"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["permission_level"].isNull())
        {
            permissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson["permission_level"].asUInt64());
        }
    }
    if(pJson.isMember("permission_comment"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["permission_comment"].isNull())
        {
            permissionComment_=std::make_shared<std::string>(pJson["permission_comment"].asString());
        }
    }
}

void Permissions::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            permissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            permissionComment_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Permissions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("permission_id"))
    {
        if(!pJson["permission_id"].isNull())
        {
            permissionId_=std::make_shared<uint32_t>((uint32_t)pJson["permission_id"].asUInt64());
        }
    }
    if(pJson.isMember("permission_level"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["permission_level"].isNull())
        {
            permissionLevel_=std::make_shared<uint32_t>((uint32_t)pJson["permission_level"].asUInt64());
        }
    }
    if(pJson.isMember("permission_comment"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["permission_comment"].isNull())
        {
            permissionComment_=std::make_shared<std::string>(pJson["permission_comment"].asString());
        }
    }
}

const uint32_t &Permissions::getValueOfPermissionId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(permissionId_)
        return *permissionId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Permissions::getPermissionId() const noexcept
{
    return permissionId_;
}
void Permissions::setPermissionId(const uint32_t &pPermissionId) noexcept
{
    permissionId_ = std::make_shared<uint32_t>(pPermissionId);
    dirtyFlag_[0] = true;
}
const typename Permissions::PrimaryKeyType & Permissions::getPrimaryKey() const
{
    assert(permissionId_);
    return *permissionId_;
}

const uint32_t &Permissions::getValueOfPermissionLevel() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(permissionLevel_)
        return *permissionLevel_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Permissions::getPermissionLevel() const noexcept
{
    return permissionLevel_;
}
void Permissions::setPermissionLevel(const uint32_t &pPermissionLevel) noexcept
{
    permissionLevel_ = std::make_shared<uint32_t>(pPermissionLevel);
    dirtyFlag_[1] = true;
}

const std::string &Permissions::getValueOfPermissionComment() const noexcept
{
    const static std::string defaultValue = std::string();
    if(permissionComment_)
        return *permissionComment_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Permissions::getPermissionComment() const noexcept
{
    return permissionComment_;
}
void Permissions::setPermissionComment(const std::string &pPermissionComment) noexcept
{
    permissionComment_ = std::make_shared<std::string>(pPermissionComment);
    dirtyFlag_[2] = true;
}
void Permissions::setPermissionComment(std::string &&pPermissionComment) noexcept
{
    permissionComment_ = std::make_shared<std::string>(std::move(pPermissionComment));
    dirtyFlag_[2] = true;
}
void Permissions::setPermissionCommentToNull() noexcept
{
    permissionComment_.reset();
    dirtyFlag_[2] = true;
}

void Permissions::updateId(const uint64_t id)
{
    permissionId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Permissions::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "permission_level",
        "permission_comment"
    };
    return inCols;
}

void Permissions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPermissionLevel())
        {
            binder << getValueOfPermissionLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPermissionComment())
        {
            binder << getValueOfPermissionComment();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Permissions::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Permissions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPermissionLevel())
        {
            binder << getValueOfPermissionLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPermissionComment())
        {
            binder << getValueOfPermissionComment();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Permissions::toJson() const
{
    Json::Value ret;
    if(getPermissionId())
    {
        ret["permission_id"]=getValueOfPermissionId();
    }
    else
    {
        ret["permission_id"]=Json::Value();
    }
    if(getPermissionLevel())
    {
        ret["permission_level"]=getValueOfPermissionLevel();
    }
    else
    {
        ret["permission_level"]=Json::Value();
    }
    if(getPermissionComment())
    {
        ret["permission_comment"]=getValueOfPermissionComment();
    }
    else
    {
        ret["permission_comment"]=Json::Value();
    }
    return ret;
}

Json::Value Permissions::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getPermissionId())
            {
                ret[pMasqueradingVector[0]]=getValueOfPermissionId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPermissionLevel())
            {
                ret[pMasqueradingVector[1]]=getValueOfPermissionLevel();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPermissionComment())
            {
                ret[pMasqueradingVector[2]]=getValueOfPermissionComment();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getPermissionId())
    {
        ret["permission_id"]=getValueOfPermissionId();
    }
    else
    {
        ret["permission_id"]=Json::Value();
    }
    if(getPermissionLevel())
    {
        ret["permission_level"]=getValueOfPermissionLevel();
    }
    else
    {
        ret["permission_level"]=Json::Value();
    }
    if(getPermissionComment())
    {
        ret["permission_comment"]=getValueOfPermissionComment();
    }
    else
    {
        ret["permission_comment"]=Json::Value();
    }
    return ret;
}

bool Permissions::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("permission_id"))
    {
        if(!validJsonOfField(0, "permission_id", pJson["permission_id"], err, true))
            return false;
    }
    if(pJson.isMember("permission_level"))
    {
        if(!validJsonOfField(1, "permission_level", pJson["permission_level"], err, true))
            return false;
    }
    if(pJson.isMember("permission_comment"))
    {
        if(!validJsonOfField(2, "permission_comment", pJson["permission_comment"], err, true))
            return false;
    }
    return true;
}
bool Permissions::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Permissions::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("permission_id"))
    {
        if(!validJsonOfField(0, "permission_id", pJson["permission_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("permission_level"))
    {
        if(!validJsonOfField(1, "permission_level", pJson["permission_level"], err, false))
            return false;
    }
    if(pJson.isMember("permission_comment"))
    {
        if(!validJsonOfField(2, "permission_comment", pJson["permission_comment"], err, false))
            return false;
    }
    return true;
}
bool Permissions::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Permissions::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
