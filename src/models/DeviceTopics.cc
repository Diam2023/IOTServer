/**
 *
 *  DeviceTopics.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DeviceTopics.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::IOTServerDB;

const std::string DeviceTopics::Cols::_device_topics_id = "device_topics_id";
const std::string DeviceTopics::Cols::_target_topic_id = "target_topic_id";
const std::string DeviceTopics::primaryKeyName = "device_topics_id";
const bool DeviceTopics::hasPrimaryKey = true;
const std::string DeviceTopics::tableName = "device_topics";

const std::vector<typename DeviceTopics::MetaData> DeviceTopics::metaData_={
{"device_topics_id","uint32_t","int unsigned",4,1,1,1},
{"target_topic_id","uint32_t","int unsigned",4,0,0,1}
};
const std::string &DeviceTopics::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
DeviceTopics::DeviceTopics(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["device_topics_id"].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>(r["device_topics_id"].as<uint32_t>());
        }
        if(!r["target_topic_id"].isNull())
        {
            targetTopicId_=std::make_shared<uint32_t>(r["target_topic_id"].as<uint32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            targetTopicId_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
    }

}

DeviceTopics::DeviceTopics(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            targetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
}

DeviceTopics::DeviceTopics(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("device_topics_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["device_topics_id"].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson["device_topics_id"].asUInt64());
        }
    }
    if(pJson.isMember("target_topic_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["target_topic_id"].isNull())
        {
            targetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson["target_topic_id"].asUInt64());
        }
    }
}

void DeviceTopics::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            targetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
}

void DeviceTopics::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("device_topics_id"))
    {
        if(!pJson["device_topics_id"].isNull())
        {
            deviceTopicsId_=std::make_shared<uint32_t>((uint32_t)pJson["device_topics_id"].asUInt64());
        }
    }
    if(pJson.isMember("target_topic_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["target_topic_id"].isNull())
        {
            targetTopicId_=std::make_shared<uint32_t>((uint32_t)pJson["target_topic_id"].asUInt64());
        }
    }
}

const uint32_t &DeviceTopics::getValueOfDeviceTopicsId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(deviceTopicsId_)
        return *deviceTopicsId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &DeviceTopics::getDeviceTopicsId() const noexcept
{
    return deviceTopicsId_;
}
void DeviceTopics::setDeviceTopicsId(const uint32_t &pDeviceTopicsId) noexcept
{
    deviceTopicsId_ = std::make_shared<uint32_t>(pDeviceTopicsId);
    dirtyFlag_[0] = true;
}
const typename DeviceTopics::PrimaryKeyType & DeviceTopics::getPrimaryKey() const
{
    assert(deviceTopicsId_);
    return *deviceTopicsId_;
}

const uint32_t &DeviceTopics::getValueOfTargetTopicId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(targetTopicId_)
        return *targetTopicId_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &DeviceTopics::getTargetTopicId() const noexcept
{
    return targetTopicId_;
}
void DeviceTopics::setTargetTopicId(const uint32_t &pTargetTopicId) noexcept
{
    targetTopicId_ = std::make_shared<uint32_t>(pTargetTopicId);
    dirtyFlag_[1] = true;
}

void DeviceTopics::updateId(const uint64_t id)
{
    deviceTopicsId_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &DeviceTopics::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "target_topic_id"
    };
    return inCols;
}

void DeviceTopics::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTargetTopicId())
        {
            binder << getValueOfTargetTopicId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> DeviceTopics::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void DeviceTopics::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTargetTopicId())
        {
            binder << getValueOfTargetTopicId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DeviceTopics::toJson() const
{
    Json::Value ret;
    if(getDeviceTopicsId())
    {
        ret["device_topics_id"]=getValueOfDeviceTopicsId();
    }
    else
    {
        ret["device_topics_id"]=Json::Value();
    }
    if(getTargetTopicId())
    {
        ret["target_topic_id"]=getValueOfTargetTopicId();
    }
    else
    {
        ret["target_topic_id"]=Json::Value();
    }
    return ret;
}

Json::Value DeviceTopics::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getDeviceTopicsId())
            {
                ret[pMasqueradingVector[0]]=getValueOfDeviceTopicsId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTargetTopicId())
            {
                ret[pMasqueradingVector[1]]=getValueOfTargetTopicId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getDeviceTopicsId())
    {
        ret["device_topics_id"]=getValueOfDeviceTopicsId();
    }
    else
    {
        ret["device_topics_id"]=Json::Value();
    }
    if(getTargetTopicId())
    {
        ret["target_topic_id"]=getValueOfTargetTopicId();
    }
    else
    {
        ret["target_topic_id"]=Json::Value();
    }
    return ret;
}

bool DeviceTopics::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("device_topics_id"))
    {
        if(!validJsonOfField(0, "device_topics_id", pJson["device_topics_id"], err, true))
            return false;
    }
    if(pJson.isMember("target_topic_id"))
    {
        if(!validJsonOfField(1, "target_topic_id", pJson["target_topic_id"], err, true))
            return false;
    }
    else
    {
        err="The target_topic_id column cannot be null";
        return false;
    }
    return true;
}
bool DeviceTopics::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DeviceTopics::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("device_topics_id"))
    {
        if(!validJsonOfField(0, "device_topics_id", pJson["device_topics_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("target_topic_id"))
    {
        if(!validJsonOfField(1, "target_topic_id", pJson["target_topic_id"], err, false))
            return false;
    }
    return true;
}
bool DeviceTopics::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DeviceTopics::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
