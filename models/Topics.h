/**
 *
 *  Topics.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <cstdint>
#include <iostream>


namespace drogon::orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}


namespace drogon_model::ExtPro
{

class Topics
{
  public:
    struct Cols
    {
        static const std::string _topic_id;
        static const std::string _topic_name;
        static const std::string _topic_data;
        static const std::string _topic_qos;
        static const std::string _topic_permission_level;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Topics(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Topics(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Topics(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Topics() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column topic_id  */
    ///Get the value of the column topic_id, returns the default value if the column is null
    const uint32_t &getValueOfTopicId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTopicId() const noexcept;
    ///Set the value of the column topic_id
    void setTopicId(const uint32_t &pTopicId) noexcept;

    /**  For column topic_name  */
    ///Get the value of the column topic_name, returns the default value if the column is null
    const std::string &getValueOfTopicName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTopicName() const noexcept;
    ///Set the value of the column topic_name
    void setTopicName(const std::string &pTopicName) noexcept;
    void setTopicName(std::string &&pTopicName) noexcept;

    /**  For column topic_data  */
    ///Get the value of the column topic_data, returns the default value if the column is null
    const std::string &getValueOfTopicData() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTopicData() const noexcept;
    ///Set the value of the column topic_data
    void setTopicData(const std::string &pTopicData) noexcept;
    void setTopicData(std::string &&pTopicData) noexcept;
    void setTopicDataToNull() noexcept;

    /**  For column topic_qos  */
    ///Get the value of the column topic_qos, returns the default value if the column is null
    const std::string &getValueOfTopicQos() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTopicQos() const noexcept;
    ///Set the value of the column topic_qos
    void setTopicQos(const std::string &pTopicQos) noexcept;
    void setTopicQos(std::string &&pTopicQos) noexcept;

    /**  For column topic_permission_level  */
    ///Get the value of the column topic_permission_level, returns the default value if the column is null
    const uint32_t &getValueOfTopicPermissionLevel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getTopicPermissionLevel() const noexcept;
    ///Set the value of the column topic_permission_level
    void setTopicPermissionLevel(const uint32_t &pTopicPermissionLevel) noexcept;


    static size_t getColumnNumber() noexcept {  return 5;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Topics>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Topics>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> topicId_;
    std::shared_ptr<std::string> topicName_;
    std::shared_ptr<std::string> topicData_;
    std::shared_ptr<std::string> topicQos_;
    std::shared_ptr<uint32_t> topicPermissionLevel_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[5]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where topic_id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where topic_id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "topic_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "topic_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "topic_data,";
            ++parametersCount;
        }
        sql += "topic_qos,";
        ++parametersCount;
        if(!dirtyFlag_[3])
        {
            needSelection=true;
        }
        sql += "topic_permission_level,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace drogon_model::ExtPro

